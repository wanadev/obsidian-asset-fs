#!/usr/bin/env node

"use strict";

var yargs = require("yargs");

var obsidianAssetFsTool = require("../tool/index.js");


var argv = yargs

    .default("output", process.cwd())
    .alias("o", "output")
    .describe("o", "Output folder")
    .options("o", {type: "string"})

    .default("fragments-size", 2 * 1024 * 1024)
    .alias("s", "fragments-size")
    .describe("s", "Average fragment size")
    .options("s", {type: "number"})

    .default("index-file-name", "index.json")
    .alias("i", "index-file-name")
    .describe("i", "Name of the index file in the output folder")
    .options("i", {type: "string"})

    .default("quiet", false)
    .alias("q", "quiet")
    .describe("q", "Do not output logs")
    .options("q", {type: "boolean"})

    .default("cwd", process.cwd())
    .alias("c", "cwd")
    .describe("c", "Current working directory")
    .options("c", {type: "string"})

    .help("h")
    .alias("h", "help")
    .usage("Usage: oafgen [options] <path [path [...]]>")

    .argv;

var paths = argv._;

if (argv.cwd != process.cwd()) {
    paths = [];
    for (var i = 0 ; i < argv._.length ; i++) {
        paths.push({
            path: argv._[i],
            cwd: argv.cwd
        });
    }
}

var options = {
    fragmentSize: argv["fragments-size"],
    outputFolder: argv.output,
    outputIndexFile: argv["index-file-name"],
    quiet: argv.quiet
};

obsidianAssetFsTool.generateFromPath(paths, options)
    .done();

// vim: ft=javascript
